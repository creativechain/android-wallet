buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'androidsvgdrawable'

android {
    aaptOptions.cruncherEnabled = false
    aaptOptions.useNewCruncher = false
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId "crea.wallet.lite"
        minSdkVersion 14
        targetSdkVersion 25
        versionCode 14
        versionName "0.2.3"
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        exclude 'lib/x86_64/darwin/libscrypt.dylib'
        exclude 'lib/x86_64/freebsd/libscrypt.so'
        exclude 'lib/x86_64/linux/libscrypt.so'
        exclude 'com/google/thirdparty/publicsuffix/PublicSuffixPatterns.gwt.xml'
        exclude 'com/google/thirdparty/publicsuffix/PublicSuffixType.gwt.xml'
        exclude 'org/creativecoin/crypto/mnemonic/wordlist/english.txt'
        exclude 'org/creativecoin/crypto/cacerts'
        exclude 'org.bitcoin.production.checkpoints.txt'
        exclude 'org.bitcoin.test.checkpoints.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }
}

repositories {
    maven { url 'http://dl.bintray.com/madcyph3r/maven/' }
    maven { url 'http://dl.bintray.com/amulyakhare/maven' }
    maven { url "https://jitpack.io" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://github.com/omadahealth/omada-nexus/raw/master/release" }
    jcenter()
    maven { url 'https://maven.fabric.io/public' }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile files('libs/creativecoinj-core.jar')
    compile('com.github.tony19:logback-android-classic:1.1.1-5') {
        exclude(group: 'com.google.android', module: 'android')
    }

    //ACTIVE ANDROID
    compile 'com.michaelpardo:activeandroid:3.1.0-SNAPSHOT'

    //PIN ACTIVITY
    compile project(':materialpin')

    //TAGVIEW
    compile 'com.github.kaedea:Android-Cloud-TagView-Plus:5a49f4fbb6'

    //SETTINGS
    compile 'com.takisoft.fix:preference-v7:25.3.1.1'

    //HTTP CLIENT
    compile 'com.github.ander7agar:android-http-client:0.4.1'

    compile 'com.android.support:multidex:1.0.1'
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support:cardview-v7:25.3.1'
    compile 'com.android.support:design:25.3.1'
    compile 'com.google.zxing:core:3.3.0'
    compile 'me.dm7.barcodescanner:zxing:1.9.1'
    compile 'net.glxn.qrgen:android:2.0'
    compile 'me.zhanghai.android.materialprogressbar:library:1.3.0'
    compile('com.crashlytics.sdk.android:crashlytics:2.6.8@aar') {
        transitive = true;
    }
}

task svgToMipmapPng(type: fr.avianey.androidsvgdrawable.gradle.SvgDrawableTask) {
    from = files('graphics/mipmap')
    to = file('src/main/res')
    targetedDensities = ['hdpi', 'xhdpi', 'xxhdpi', 'xxxhdpi']
    outputFormat = 'PNG'
    outputType = 'mipmap'
}

task svgToDrawablePng(type: fr.avianey.androidsvgdrawable.gradle.SvgDrawableTask) {
    from = files('graphics/drawable')
    to = file('src/main/res')
    targetedDensities = ['hdpi', 'xhdpi', 'xxhdpi', 'xxxhdpi']
    outputFormat = 'PNG'
    outputType = 'drawable'
}
